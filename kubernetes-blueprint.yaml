tosca_definitions_version: cloudify_dsl_1_3

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - http://www.getcloudify.org/spec/utilities-plugin/1.4.1/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.4.1/cloudify_deployment_proxy/types.yaml
  - http://www.getcloudify.org/spec/kubernetes-plugin/1.3.1.1/plugin.yaml

inputs:

  environment_blueprint_filename:
    default: openstack-blueprint.yaml

  kubernetes_master_ip:
    type: string
    default: { get_secret: kubernetes_master_ip }

  kubernetes_master_port:
    type: string
    default: { get_secret: kubernetes_master_port }

  kubernetes_certificate_authority_data:
    default: { get_secret: kubernetes_certificate_authority_data }

  kubernetes-admin_client_certificate_data:
    default: { get_secret: kubernetes-admin_client_certificate_data }

  kubernetes-admin_client_key_data:
    default: { get_secret: kubernetes-admin_client_key_data }

  db_user_privileges:
    default: [ALL PRIVILEGES]

  db_user_password:
    default: X0kdmdwethrngosdf88

node_types:

  cloudify.kubernetes.resources.PersistentVolumeClaim:
    derived_from: cloudify.kubernetes.resources.CustomBlueprintDefinedResource
    properties:
      api_mapping:
        default:
          create:
            api: CoreV1Api
            method: create_namespaced_persistent_volume_claim
            payload: V1PersistentVolumeClaim
          read:
            api: CoreV1Api
            method: read_namespaced_persistent_volume_claim
          delete:
            api: CoreV1Api
            method: delete_namespaced_persistent_volume_claim
            payload: V1DeleteOptions

dsl_definitions:

  kube_config: &kube_config
    apiVersion: v1
    kind: Config
    preferences: {}
    current-context: kubernetes-admin@kubernetes
    clusters:
    - name: kubernetes
      cluster:
        certificate-authority-data: { get_input: kubernetes_certificate_authority_data }
        server: { concat: [ 'https://', { get_input: kubernetes_master_ip}, ':', { get_input: kubernetes_master_port } ] }
    contexts:
    - name: kubernetes-admin@kubernetes
      context:
        cluster: kubernetes
        user: kubernetes-admin
    users:
    - name: kubernetes-admin
      user:
        client-certificate-data: { get_input: kubernetes-admin_client_certificate_data }
        client-key-data:  { get_input: kubernetes-admin_client_key_data }

node_templates:

  # wordpress_svc:
  #   type: cloudify.kubernetes.resources.Service
  #   properties:
  #     definition:
  #       apiVersion: v1
  #       kind: Service
  #       metadata:
  #         name: wordpress
  #         labels:
  #           app: wordpress
  #       spec:
  #         ports:
  #           - port: 80
  #             nodePort: 30080
  #         selector:
  #           app: wordpress
  #           tier: frontend
  #         type: LoadBalancer
  #   relationships:
  #     - type: cloudify.kubernetes.relationships.managed_by_master
  #       target: kubernetes_master
  #     - type: cloudify.relationships.depends_on
  #       target: mysql_pv_claim
  #     - type: cloudify.depends_on
  #       target: wordpress_deploy

  # wordpress_deploy:
  #   type: cloudify.kubernetes.resources.Deployment
  #   properties:
  #     definition:
  #       apiVersion: extensions/v1beta1
  #       kind: Deployment
  #       metadata:
  #         name: wordpress
  #         labels:
  #           app: wordpress
  #       spec:
  #         strategy:
  #           type: Recreate
  #         template:
  #           metadata:
  #             labels:
  #               app: wordpress
  #               tier: frontend
  #           spec:
  #             containers:
  #             - image: wordpress:4.8.0-apache
  #               name: wordpress
  #               env:
  #               - name: WORDPRESS_DB_PASSWORD
  #                 value: { get_input: db_user_password }
  #               - name: WORDPRESS_DB_HOST
  #                 value: { get_attribute: [ lb, ip ] }
  #               - name: WORDPRESS_DB_USER
  #                 value: demo
  #               ports:
  #               - containerPort: 80
  #                 name: wordpress
  #               volumeMounts:
  #               - name: wordpress-persistent-storage
  #                 mountPath: /var/www/html
  #             volumes:
  #             - name: wordpress-persistent-storage
  #               persistentVolumeClaim:
  #                 claimName: wp-pv-claim
  #   relationships:
  #     - type: cloudify.kubernetes.relationships.managed_by_master
  #       target: kubernetes_master
  #     - type: cloudify.relationships.depends_on
  #       target: mysql_pv_claim
  #     - type: cloudify.depends_on
  #       target: lb

  # wp_pv_claim:
  #   type: cloudify.kubernetes.resources.PersistentVolumeClaim
  #   properties:
  #     definition:
  #       apiVersion: v1
  #       kind: PersistentVolumeClaim
  #       metadata:
  #         name: wp-pv-claim
  #         labels:
  #           app: wordpress
  #       spec:
  #         accessModes:
  #           - ReadWriteOnce
  #         resources:
  #           requests:
  #             storage: 20Gi
  #   relationships:
  #     - type: cloudify.kubernetes.relationships.managed_by_master
  #       target: kubernetes_master

  # kubernetes_master:
  #   type: cloudify.kubernetes.nodes.Master
  #   properties:
  #     configuration:
  #       file_content: *kube_config

  # lb:
  #   type: cloudify.nodes.DeploymentProxy
  #   properties:
  #     resource_config:
  #       blueprint:
  #         id: lb
  #         blueprint_archive: https://github.com/cloudify-examples/haproxy-blueprint/archive/master.zip
  #         main_file_name: { get_input: environment_blueprint_filename }
  #       deployment:
  #         id: lb
  #         inputs:
  #           application_ip: ''
  #         outputs:
  #           ip: ip
  #   relationships:
  #     - type: cloudify.relationships.depends_on
  #       target: db
  #   interfaces:
  #     cloudify.interfaces.lifecycle:
  #       configure:
  #         implementation: cfy_util.cloudify_deployment_proxy.tasks.create_deployment
  #         inputs:
  #           resource_config:
  #             blueprint: { get_property: [ SELF, resource_config, blueprint ] }
  #             deployment:
  #               id: { get_property: [ SELF, resource_config, deployment, id ] }
  #               inputs:
  #                 application_ip: { get_attribute: [ db, deployment, outputs, ip ] }
  #               outputs:
  #                 ip: { get_property: [ SELF, resource_config, deployment, outputs, ip ] }

  db:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
          id: db
          blueprint_archive: https://github.com/cloudify-examples/mariadb-blueprint/archive/master.zip
          main_file_name: { get_input: environment_blueprint_filename }
        deployment:
          id: db
          inputs:
            users:
              demo:
                privileges: { get_input: db_user_privileges }
            new_password: { get_input: db_user_password }
          outputs:
            ip: db
